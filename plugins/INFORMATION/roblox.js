const fetch = require('node-fetch');
const { logCustom } = require('@lib/logger');

async function handle(sock, messageInfo) {
    const { remoteJid, message, prefix, command, content } = messageInfo;

    try {
        const trimmedContent = content.trim();

        if (!trimmedContent) {
            return await sock.sendMessage(
                remoteJid,
                { text: `_·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á  Ä·¥è ô ü·¥èx_\n\n${prefix + command} haikalzxyz` },
                { quoted: message }
            );
        }

        const username = trimmedContent;
        await sock.sendMessage(remoteJid, { react: { text: '‚è∞', key: message.key } });

        const url = `https://zenzxz.dpdns.org/stalker/roblox?username=${encodeURIComponent(username)}`;
        const res = await fetch(url);
        const json = await res.json();

        if (!json?.status || !json?.success || !json?.data) {
            return await sock.sendMessage(
                remoteJid,
                { text: '‚ö†Ô∏è ·¥Ö·¥Ä·¥õ·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥ ·¥Ä·¥õ·¥Ä·¥ú ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á s·¥Ä ü·¥Ä ú.' },
                { quoted: message }
            );
        }

        const { account, presence, stats, badges } = json.data;

        const caption = `üëæ * Ä·¥è ô ü·¥èx ·¥ús·¥á Ä …™…¥“ì·¥è*

‚óâ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á        : ${account.username}
‚óâ ·¥Ö…™s·¥ò ü·¥Ä è …¥·¥Ä·¥ç·¥á    : ${account.displayName}
‚óâ ·¥†·¥á Ä…™“ì…™·¥á·¥Ö  ô·¥Ä·¥Ö…¢·¥á  : ${account.hasVerifiedBadge ? ' è·¥Ä' : '·¥õ…™·¥Ö·¥Ä·¥ã'}
‚óâ  ô·¥Ä…¥…¥·¥á·¥Ö          : ${account.isBanned ? ' è·¥Ä' : '·¥õ…™·¥Ö·¥Ä·¥ã'}
‚óâ ·¥Ö·¥ás·¥ã Ä…™·¥òs…™       : ${account.description || '-'}
‚óâ ·¥Ä·¥ã·¥ú…¥ ·¥Ö…™ ô·¥ú·¥Ä·¥õ     : ${account.created}
‚óâ s·¥õ·¥Ä·¥õ·¥ús ·¥è…¥ ü…™…¥·¥á   : ${presence.isOnline ? '·¥è…¥ ü…™…¥·¥á' : '·¥è“ì“ì ü…™…¥·¥á'}
‚óâ ·¥õ·¥á Ä·¥Ä·¥ã ú…™ Ä ·¥è…¥ ü…™…¥·¥á : ${presence.lastOnline || '-'}
‚óâ …¢·¥Ä·¥ç·¥á ·¥õ·¥á Ä·¥Ä·¥ã ú…™ Ä   : ${presence.recentGame || '-'}
‚óâ ·¥ä·¥ú·¥ç ü·¥Ä ú ·¥õ·¥á·¥ç·¥Ä…¥    : ${stats.friendCount}
‚óâ “ì·¥è ü ü·¥è·¥°·¥á Äs       : ${stats.followers}
‚óâ “ì·¥è ü ü·¥è·¥°…™…¥…¢       : ${stats.following}
‚óâ ·¥ä·¥ú·¥ç ü·¥Ä ú  ô·¥Ä·¥Ö…¢·¥á    : ${Array.isArray(badges) ? badges.length : 0}`;

        await sock.sendMessage(remoteJid, {
            image: { url: account.profilePicture },
            caption
        }, { quoted: message });

    } catch (error) {
        console.error('Error:', error);
        logCustom('info', content, `ERROR-COMMAND-${command}.txt`);
        await sock.sendMessage(
            remoteJid,
            {
                text: `‚ùå ·¥õ·¥á Ä·¥ä·¥Ä·¥Ö…™ ·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥ s·¥Ä·¥Ä·¥õ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás ·¥ò·¥á Ä·¥ç…™…¥·¥õ·¥Ä·¥Ä…¥.\n\n*·¥Ö·¥á·¥õ·¥Ä…™ ü:* ${error.message || error}`
            },
            { quoted: message }
        );
    }
}

module.exports = {
    handle,
    Commands    : ['robloxcek','roblox'],
    OnlyPremium : false,
    OnlyOwner   : false,
    limitDeduction: 1
};